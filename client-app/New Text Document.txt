// MainFrame.java
package Gui;

import Api.RestClient;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ExecutionException;

public class MainFrame extends JFrame {

    private JButton addButton;
    private JButton clearButton;
    private JButton sendRequestButton;
    private JList<String> dynamicList;
    private DefaultListModel<String> listModel;
    private JLabel resultLabel;
    private RestClient restClient;

    public MainFrame() {
        // Initialize RestClient instance
        restClient = new RestClient();

        initializeComponents();
        createLayout();
        setupListeners();
    }

    // ... (rest of the methods remain the same)

    private void setupListeners() {
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newItem = JOptionPane.showInputDialog("Enter new item:");
                if (newItem != null && !newItem.isEmpty()) {
                    listModel.addElement(newItem);
                }
            }
        });

        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listModel.clear();
            }
        });

        sendRequestButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Trigger the HTTP GET request when the button is pressed
                new HttpRequestWorker().execute();
            }
        });

        dynamicList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                String selectedValue = dynamicList.getSelectedValue();
                resultLabel.setText("Result: " + selectedValue);
            }
        });
    }

    // SwingWorker to perform HTTP request in the background
    private class HttpRequestWorker extends SwingWorker<String, Void> {
        @Override
        protected String doInBackground() throws Exception {
            try {
                // Call the sendGetRequest method from RestClient
                return restClient.sendGetRequest("https://api.example.com/data");
            } catch (IOException e) {
                return "Error: " + e.getMessage();
            }
        }

        @Override
        protected void done() {
            try {
                // Retrieve the result of the HTTP request
                String result = get();
                resultLabel.setText("HTTP Request Result: " + result);
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }
}
